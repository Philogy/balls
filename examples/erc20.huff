#define macro _REQUIRE_NOT() = takes(1) returns(0) {
    iszero is_ok jumpi
        0x0 0x0 revert
    is_ok:
}

// balls-insert-start
#define macro PERMIT() = takes(1) returns(0) {
    // takes:                      [error]
    0x10                        // [error, 0x10]
    _LOAD_ADDRESS()             // [error, owner]
    0x64                        // [error, owner, 0x64]
    calldataload                // [error, owner, deadline]
    dup2                        // [error, owner, deadline, owner]
    _NONCES_SLOT()              // [error, owner, deadline, nonce_slot]
    0x44                        // [error, owner, deadline, nonce_slot, 0x44]
    calldataload                // [error, owner, deadline, nonce_slot, amount]
    0x30                        // [error, owner, deadline, nonce_slot, amount, 0x30]
    _LOAD_ADDRESS()             // [error, owner, deadline, nonce_slot, amount, spender]
    _PERMIT_TYPEHASH()          // [error, owner, deadline, nonce_slot, amount, spender, _PERMIT_TYPEHASH]
    msize                       // [error, owner, deadline, nonce_slot, amount, spender, _PERMIT_TYPEHASH, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount, spender]
    dup5                        // [error, owner, deadline, nonce_slot, amount, spender, owner]
    msize                       // [error, owner, deadline, nonce_slot, amount, spender, owner, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount, spender]
    msize                       // [error, owner, deadline, nonce_slot, amount, spender, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount]
    dup1                        // [error, owner, deadline, nonce_slot, amount, amount]
    msize                       // [error, owner, deadline, nonce_slot, amount, amount, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount]
    0x1                         // [error, owner, deadline, nonce_slot, amount, 0x1]
    dup3                        // [error, owner, deadline, nonce_slot, amount, 0x1, nonce_slot]
    sload                       // [error, owner, deadline, nonce_slot, amount, 0x1, nonce]
    dup1                        // [error, owner, deadline, nonce_slot, amount, 0x1, nonce, nonce]
    msize                       // [error, owner, deadline, nonce_slot, amount, 0x1, nonce, nonce, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount, 0x1, nonce]
    dup5                        // [error, owner, deadline, nonce_slot, amount, 0x1, nonce, deadline]
    msize                       // [error, owner, deadline, nonce_slot, amount, 0x1, nonce, deadline, msize]
    mstore                      // [error, owner, deadline, nonce_slot, amount, 0x1, nonce]
    add                         // [error, owner, deadline, nonce_slot, amount, add(nonce, 0x1)]
    msize                       // [error, owner, deadline, nonce_slot, amount, add(nonce, 0x1), msize]
    returndatasize              // [error, owner, deadline, nonce_slot, amount, add(nonce, 0x1), msize, returndatasize]
    sha3                        // [error, owner, deadline, nonce_slot, amount, add(nonce, 0x1), permit_hash]
    swap3                       // [error, owner, deadline, permit_hash, amount, add(nonce, 0x1), nonce_slot]
    sstore                      // [error, owner, deadline, permit_hash, amount]
    0x40                        // [error, owner, deadline, permit_hash, amount, 0x40]
    0x20                        // [error, owner, deadline, permit_hash, amount, 0x40, 0x20]
    sha3                        // [error, owner, deadline, permit_hash, amount, allowance_slot]
    _CACHED_DOMAIN_SEP()        // [error, owner, deadline, permit_hash, amount, allowance_slot, _CACHED_DOMAIN_SEP]
    0x1901                      // [error, owner, deadline, permit_hash, amount, allowance_slot, _CACHED_DOMAIN_SEP, 0x1901]
    0x21                        // [error, owner, deadline, permit_hash, amount, allowance_slot, _CACHED_DOMAIN_SEP, 0x1901, 0x21]
    mstore                      // [error, owner, deadline, permit_hash, amount, allowance_slot, _CACHED_DOMAIN_SEP]
    0x41                        // [error, owner, deadline, permit_hash, amount, allowance_slot, _CACHED_DOMAIN_SEP, 0x41]
    mstore                      // [error, owner, deadline, permit_hash, amount, allowance_slot]
    sstore                      // [error, owner, deadline, permit_hash]
    0x61                        // [error, owner, deadline, permit_hash, 0x61]
    mstore                      // [error, owner, deadline]
    0x42                        // [error, owner, deadline, 0x42]
    0x3f                        // [error, owner, deadline, 0x42, 0x3f]
    sha3                        // [error, owner, deadline, message_hash]
    returndatasize              // [error, owner, deadline, message_hash, returndatasize]
    mstore                      // [error, owner, deadline]
    timestamp                   // [error, owner, deadline, timestamp]
    gt                          // [error, owner, deadline_invalid]
    swap1                       // [error, deadline_invalid, owner]
    0x20                        // [error, deadline_invalid, owner, 0x20]
    0x1                         // [error, deadline_invalid, owner, 0x20, 0x1]
    0x41                        // [error, deadline_invalid, owner, 0x20, 0x1, 0x41]
    0xa3                        // [error, deadline_invalid, owner, 0x20, 0x1, 0x41, 0xa3]
    0x3f                        // [error, deadline_invalid, owner, 0x20, 0x1, 0x41, 0xa3, 0x3f]
    calldatacopy                // [error, deadline_invalid, owner, 0x20, 0x1]
    0x80                        // [error, deadline_invalid, owner, 0x20, 0x1, 0x80]
    returndatasize              // [error, deadline_invalid, owner, 0x20, 0x1, 0x80, returndatasize]
    0x1                         // [error, deadline_invalid, owner, 0x20, 0x1, 0x80, returndatasize, 0x1]
    gas                         // [error, deadline_invalid, owner, 0x20, 0x1, 0x80, returndatasize, 0x1, gas]
    staticcall                  // [error, deadline_invalid, owner, suc]
    mload                       // [error, deadline_invalid, owner, signer]
    sub                         // [error, deadline_invalid, signature_invalid]
    or                          // [error, or(signature_invalid, deadline_invalid)]
    or                          // [or(or(signature_invalid, deadline_invalid), error)]
    _REQUIRE_NOT()              // []
    stop                        // []
    // returns:                    []
}
// balls-insert-end
