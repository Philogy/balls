// Single line comment.

// Define dependency types
#define dependency STORAGE
#define dependency MEMORY
#define dependency RETURNDATA
#define dependency STOP

// Constants
#define op calldataload = stack(1, 1)
#define op caller = stack(0, 1)

// Pure ops
#define op add = stack(2, 1)
#define op sub = stack(2, 1)
#define op gt = stack(2, 1)
#define op or = stack(2, 1)

#define op returndatasize = stack(0, 1) reads(RETURNDATA)

// Memory ops
#define op msize = stack(0, 1) reads(MEMORY)
#define op mstore = stack(2, 0) writes(MEMORY)

// Storage
#define op sload = stack(1, 1) reads(STOP, STORAGE)
#define op sstore = stack(2, 0) reads(STOP) writes(STORAGE)

// Termination
#define op return = stack(2, 0) reads(MEMORY) writes(STOP)

// EXTERNAL
#define op _REQUIRE_NOT = extern stack(1, 0) reads(STOP)

// Define actual code
#define macro TRANSFER = [error] -> {
    // Define some variables
    to = calldataload(0x04)
    amount = calldataload(0x24)

    // Get from balance.
    from_bal = sload(caller())

    // Check from balance and error.
    insufficient_bal = gt(amount, from_bal)
    error' = or(error, insufficient_bal)
    _REQUIRE_NOT(error')

    // Update from balance.
    new_from_bal = sub(from_bal, amount)
    sstore(caller(), new_from_bal)

    // Update to balance.
    to_bal = sload(to)
    new_to_bal = add(to_bal, amount)
    sstore(to, new_to_bal)

    // Return success (1).
    mstore(returndatasize(), 1)
    return(returndatasize(), msize())
} -> []
